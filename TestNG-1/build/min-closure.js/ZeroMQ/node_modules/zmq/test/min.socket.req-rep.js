'use strict';var zmq=require(".."),should=require("should");
describe("socket.req-rep",function(){it("should support req-rep",function(e){var b=zmq.socket("rep"),c=zmq.socket("req");b.on("message",function(a){a.should.be.an.instanceof(Buffer);a.toString().should.equal("hello");b.send("world")});b.bind("inproc://stuffreqrep",function(a){if(a)throw a;c.connect("inproc://stuffreqrep");c.send("hello");c.on("message",function(a){a.should.be.an.instanceof(Buffer);a.toString().should.equal("world");b.close();c.close();e()})})});it("should support multiple",function(e){for(var b=
0;5>b;b++)(function(b){var a=zmq.socket("rep"),d=zmq.socket("req");a.on("message",function(b){b.should.be.an.instanceof(Buffer);b.toString().should.equal("hello");a.send("world")});a.bind("inproc://"+b,function(f){if(f)throw f;d.connect("inproc://"+b);d.send("hello");d.on("message",function(f){f.should.be.an.instanceof(Buffer);f.toString().should.equal("world");d.close();a.close();--b||e()})})})(b)});it("should support a burst",function(e){var b=zmq.socket("rep"),c=zmq.socket("req");b.on("message",
function(a){a.should.be.an.instanceof(Buffer);a.toString().should.equal("hello");b.send("world")});b.bind("inproc://reqrepburst",function(a){if(a)throw a;c.connect("inproc://reqrepburst");var d=0;c.on("message",function(a){a.should.be.an.instanceof(Buffer);a.toString().should.equal("world");d+=1;10===d&&(b.close(),c.close(),e())});for(a=0;10>a;a+=1)c.send("hello")})})});